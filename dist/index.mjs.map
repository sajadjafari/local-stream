{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {nanoid} from 'nanoid';\n\ntype ScreenSourceKind = 'displaycapture' | 'windowcapture' | 'browsercapture';\ntype MediaSourceKind = 'audioinput' | 'videoinput';\ntype FileSourceKind = 'imagefile' | 'videofile' | 'audiofile';\ntype SourceKind = FileSourceKind | MediaSourceKind | ScreenSourceKind;\n\ninterface ISourceBase {\n    id: string;\n    name: string;\n    sourceKind: SourceKind;\n}\n\ninterface ISourceVisualBase {\n    id: string;\n    width: number;\n    height: number;\n    ratio: number;\n    name: string;\n    sourceType: 'visual';\n}\n\ninterface ISourceSoundBase {\n    sourceType: 'sound';\n}\n\nexport interface ISourceImage extends ISourceBase, ISourceVisualBase {\n    source: HTMLImageElement;\n}\n\nexport interface ISourceVideo extends ISourceBase, ISourceVisualBase {\n    source: HTMLVideoElement;\n}\n\nexport interface ISourceAudio extends ISourceBase, ISourceSoundBase {\n    source: HTMLAudioElement;\n}\n\nexport interface ISourceVideoStream extends ISourceBase, ISourceVisualBase {\n    source: MediaStream;\n    soundTrack: boolean;\n}\n\nexport interface ISourceAudioStream extends ISourceBase, ISourceSoundBase {\n    source: MediaStream;\n}\n\nexport type SourceItem = ISourceImage | ISourceVideo | ISourceAudio | ISourceVideoStream | ISourceAudioStream;\n\nexport type MediaItem = {\n    id: number;\n    label: string;\n    sourceKind: string;\n    getSource: () => Promise<SourceItem>;\n}\n\ninterface LocalStream {\n    devices(type?: MediaDeviceKind | 'input' | 'output'): Promise<MediaDeviceInfo[]>;\n\n    getMediaTrack(kind: 'video' | 'audio', constraints?: MediaTrackConstraints): Promise<MediaStream>;\n\n    getDisplay(constraints?: DisplayMediaStreamOptions): Promise<MediaStream>;\n\n    loadFile(type: FileSourceKind): Promise<SourceItem>\n\n    getMediaList(): Promise<Array<MediaItem>>\n}\n\nconst defaults = {\n    video: {\n        width: {ideal: 960},\n        height: {ideal: 540},\n        frameRate: 30,\n        videoAspectRatio: 1.7777777778,\n    },\n    audio: {\n        echoCancellation: true,\n        noiseSuppression: true,\n    },\n    display: {\n        audio: true,\n        video: {\n            height: 1080,\n        },\n    },\n};\n\nconst getReadableName = (device: MediaDeviceInfo, counter: number): string => {\n    if (device.label) return device.label;\n    const uppercase = (s: string) => s.charAt(0).toUpperCase() + s.slice(1);\n    const words = device.kind.replace(/(audio|video)(\\w+)/, \"$1 $2\").split(\" \");\n    return `${uppercase(words[0])} ${uppercase(words[1])} ${counter}`;\n};\n\nconst getSourceName = (track: MediaStreamTrack): string => {\n    const [lblName, lblID] = track?.label ? track.label.split(\":\") : [\"Screen\", \"Capture\"];\n    const name = lblName.startsWith(\"web\") ? \"Tab\" : `${lblName[0].toLocaleUpperCase()}${lblName.substr(1)}`;\n    const tag = lblName.startsWith(\"web\") ? lblID?.replace(/\\//g, \"\")?.substr(-5) : lblID;\n    return `${name}${tag ? ` ${tag}` : \"\"}`;\n};\n\nconst getScreenCaptureConstraint = (displaySurface: DisplayCaptureSurfaceType): DisplayMediaStreamOptions => {\n    return {\n        audio: true,\n        video: {\n            width: 1920,\n            height: 1080,\n            frameRate: 40,\n            displaySurface,\n        },\n    };\n};\n\nconst getStreamDimensions = async (stream: MediaStream): Promise<{ width: number; height: number; ratio: number }> => {\n    return await new Promise(resolve => {\n        let video = document.createElement(\"video\");\n        video.muted = true;\n        video.srcObject = stream;\n        video.onloadedmetadata = () => {\n            const ratio = video.videoWidth / video.videoHeight;\n            resolve({\n                width: video.videoWidth,\n                height: video.videoHeight,\n                ratio,\n            });\n            video.remove();\n        };\n    });\n};\n\nconst handleFileLoad = async (accept: string, callback: (e: Event) => Promise<SourceItem>): Promise<SourceItem> => {\n    return new Promise(resolve => {\n        const input = document.createElement(\"input\");\n        input.accept = accept;\n        input.multiple = false;\n        input.hidden = true;\n        input.type = \"file\";\n        input.addEventListener(\"change\", async (e: Event) => {\n            resolve(await callback(e));\n        });\n        document.body.appendChild(input);\n        input.click();\n    });\n};\n\nconst handleImageFileLoad = async (e: Event): Promise<SourceItem> => {\n    return await new Promise<SourceItem>(resolve => {\n        const [file] = (e.target as HTMLInputElement)?.files as FileList;\n        const reader = new FileReader();\n        reader.onloadend = event => {\n            const image = new Image();\n            image.src = event.target?.result as string;\n            image.onload = () => {\n                resolve({\n                    id: nanoid(),\n                    width: image.width,\n                    height: image.height,\n                    ratio: image.width / image.height,\n                    name: file.name,\n                    sourceKind: 'imagefile',\n                    sourceType: 'visual',\n                    source: image,\n                });\n            };\n        };\n        reader.readAsDataURL(file);\n    });\n};\n\nconst handleVideoFileLoad = async (e: Event): Promise<SourceItem> => {\n    return await new Promise<SourceItem>(resolve => {\n        const [file] = (e.target as HTMLInputElement)?.files as FileList;\n        const source = document.createElement(\"video\");\n        const reader = new FileReader();\n        reader.onload = event => {\n            source.src = event.target?.result as string;\n            source.onloadedmetadata = () => {\n                resolve({\n                    id: nanoid(),\n                    width: source.videoWidth,\n                    height: source.videoHeight,\n                    ratio: source.videoWidth / source.videoHeight,\n                    name: file.name,\n                    sourceKind: 'videofile',\n                    sourceType: 'visual',\n                    source,\n                });\n            };\n            source.load();\n        };\n        reader.readAsDataURL(file);\n    });\n};\n\nconst handleAudioFileLoad = async (e: Event): Promise<SourceItem> => {\n    return await new Promise<SourceItem>(resolve => {\n        const [file] = (e.target as HTMLInputElement)?.files as FileList;\n        const source = document.createElement(\"audio\");\n        const reader = new FileReader();\n\n        reader.onload = event => {\n            source.src = event.target?.result as string;\n            source.onloadedmetadata = () => {\n                resolve({\n                    id: nanoid(),\n                    name: file.name,\n                    sourceKind: 'audiofile',\n                    sourceType: 'sound',\n                    source,\n                });\n            };\n            source.load();\n        };\n        reader.readAsDataURL(file);\n    });\n};\n\nconst handleDisplayLoad = async (displaySurface: DisplayCaptureSurfaceType, sourceKind: ScreenSourceKind): Promise<ISourceVideoStream> => {\n    const source = await getDisplay(getScreenCaptureConstraint(displaySurface));\n    const {width, height, ratio} = await getStreamDimensions(source);\n    const [audioTrack] = source.getAudioTracks();\n    const [videoTrack] = source.getVideoTracks();\n    const name: string = getSourceName(videoTrack);\n\n    return {\n        id: source.id,\n        name,\n        sourceKind,\n        sourceType: 'visual',\n        width,\n        height,\n        ratio,\n        soundTrack: !!audioTrack,\n        source: source as MediaStream,\n    };\n};\n\nconst handleMediaDeviceLoad = async (sourceKind: MediaSourceKind, deviceId: string, name: string): Promise<SourceItem> => {\n    const mediaType = sourceKind === 'audioinput' ? \"audio\" : \"video\";\n    const source = await getMediaTrack(mediaType, {deviceId: {exact: deviceId}});\n    const sourceOptions = {\n        id: source.id,\n        name,\n        source,\n        sourceKind,\n        sourceType: sourceKind === 'audioinput' ? 'sound' : 'visual',\n    };\n\n    if (sourceKind === 'videoinput') {\n        const {width, height, ratio} = await getStreamDimensions(source);\n        return {...sourceOptions, width, height, ratio} as ISourceVideoStream;\n    }\n    return sourceOptions as ISourceAudioStream;\n};\n\nconst devices = async (type: MediaDeviceKind | 'input' | 'output'): Promise<MediaDeviceInfo[]> => {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    switch (type) {\n        case 'audioinput':\n        case 'videoinput':\n            return devices.filter((device) => device.kind === type);\n        case \"input\":\n        case \"output\":\n            return devices.filter((device) => device.kind.endsWith(type));\n        default:\n            return devices;\n    }\n};\n\nconst getMediaTrack = async (kind: 'video' | 'audio', constraints: MediaTrackConstraints = {}): Promise<MediaStream> => {\n    return await navigator.mediaDevices.getUserMedia({\n        [kind]: {\n            ...defaults[kind],\n            ...constraints,\n        },\n    });\n};\n\nconst getDisplay = async (constraints: DisplayMediaStreamOptions = {}): Promise<MediaStream> => {\n    const cons = {\n        ...defaults.display,\n        ...constraints,\n    };\n    return await navigator.mediaDevices.getDisplayMedia(cons);\n};\n\nconst loadFile = async (type: FileSourceKind): Promise<SourceItem> => {\n    switch (type) {\n        case 'imagefile':\n            return handleFileLoad(\"image/*\", handleImageFileLoad);\n        case 'videofile':\n            return handleFileLoad(\"video/*\", handleVideoFileLoad);\n        case 'audiofile':\n            return handleFileLoad(\"audio/*\", handleAudioFileLoad);\n    }\n};\n\nconst getMediaList = async (): Promise<Array<MediaItem>> => {\n    let counter = 0;\n    const count = () => (counter += 1);\n\n    const list = [\n        {\n            id: count(),\n            label: \"Image\",\n            sourceKind: 'imagefile',\n            getSource: () => loadFile('imagefile'),\n        },\n        {\n            id: count(),\n            label: \"Video\",\n            sourceKind: 'videofile',\n            getSource: () => loadFile('videofile'),\n        },\n        {\n            id: count(),\n            label: \"Audio\",\n            sourceKind: 'audiofile',\n            getSource: () => loadFile('audiofile'),\n        },\n        {\n            id: count(),\n            label: \"Display Capture\",\n            sourceKind: 'displaycapture',\n            getSource: () => handleDisplayLoad(\"monitor\", 'displaycapture'),\n        },\n        {\n            id: count(),\n            label: \"Window Capture\",\n            sourceKind: 'windowcapture',\n            getSource: () => handleDisplayLoad(\"window\", 'windowcapture'),\n        },\n        {\n            id: count(),\n            label: \"Browser Capture\",\n            sourceKind: 'browsercapture',\n            getSource: () => handleDisplayLoad(\"browser\", 'browsercapture'),\n        },\n    ];\n\n    const addCaptureDevices = (devices: MediaDeviceInfo[], sourceKind: MediaSourceKind) => {\n        for (const device of devices) {\n            if (device.deviceId !== \"default\") {\n                const id = count();\n                const sourceName = getReadableName(device, id);\n                list.push({\n                    id,\n                    label: sourceName,\n                    sourceKind,\n                    getSource: async () => await handleMediaDeviceLoad(sourceKind, device.deviceId, sourceName),\n                });\n            }\n        }\n    };\n\n    addCaptureDevices(await devices('audioinput'), 'audioinput');\n    addCaptureDevices(await devices('videoinput') as MediaDeviceInfo[], 'videoinput');\n\n    return list;\n};\n\nexport default {\n    devices,\n    loadFile,\n    getMediaTrack,\n    getDisplay,\n    getMediaList,\n} as LocalStream;"],"mappings":"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","names":["nanoid","defaults","getReadableName","device","counter","uppercase","s","words","getSourceName","track","_a","lblName","lblID","name","tag","getScreenCaptureConstraint","displaySurface","getStreamDimensions","stream","__async","resolve","video","ratio","handleFileLoad","accept","callback","input","e","handleImageFileLoad","file","reader","event","image","nanoid","handleVideoFileLoad","source","handleAudioFileLoad","handleDisplayLoad","sourceKind","getDisplay","width","height","audioTrack","videoTrack","handleMediaDeviceLoad","deviceId","getMediaTrack","sourceOptions","__spreadProps","__spreadValues","devices","type","_0","_1","kind","constraints","cons","loadFile","getMediaList","count","list","addCaptureDevices","id","sourceName","src_default"]}